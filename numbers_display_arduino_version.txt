#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

// OLED display TWI address
#define OLED_ADDR   0x3C

Adafruit_SSD1306 display(-1);

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

void setup() {
  // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
  display.clearDisplay();
  display.display();
}

double radius = 0.0;

unsigned char one [] = {255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 212, 15, 43, 21, 38, 26, 38, 26, 38, 26, 38, 26, 38, 26, 38, 26, 38, 12, 5, 9, 22, 9, 7, 6, 11, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 9, 55, 9, 55, 9, 55, 9, 55, 9, 40, 39, 25, 39, 25, 39, 25, 39, 25, 39, 25, 39, 25, 39, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 219};

unsigned char two [] = {255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 82, 17, 43, 24, 37, 29, 32, 34, 28, 37, 27, 38, 26, 39, 25, 40, 24, 14, 12, 15, 23, 11, 17, 14, 22, 9, 21, 12, 9, 9, 4, 7, 24, 12, 8, 9, 4, 5, 27, 11, 8, 9, 4, 3, 30, 11, 7, 9, 4, 2, 31, 11, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 54, 10, 54, 10, 53, 11, 53, 11, 52, 11, 53, 11, 52, 12, 51, 12, 52, 12, 51, 12, 51, 12, 51, 13, 50, 13, 50, 13, 51, 12, 51, 13, 50, 13, 50, 13, 50, 13, 50, 13, 50, 13, 50, 13, 50, 13, 50, 13, 50, 13, 23, 9, 18, 13, 24, 9, 17, 13, 25, 9, 16, 13, 26, 9, 15, 13, 27, 9, 14, 13, 28, 9, 13, 13, 29, 9, 12, 13, 30, 9, 11, 13, 31, 9, 10, 13, 32, 9, 9, 13, 33, 9, 8, 13, 34, 9, 7, 13, 50, 14, 49, 14, 50, 13, 50, 13, 51, 45, 19, 45, 19, 45, 19, 45, 19, 45, 19, 45, 19, 45, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 218};

//unsigned char three [] = {255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 80, 20, 40, 27, 33, 33, 31, 35, 29, 36, 28, 37, 27, 38, 26, 39, 25, 10, 15, 15, 24, 6, 21, 14, 23, 3, 26, 12, 8, 9, 36, 11, 8, 9, 37, 11, 7, 9, 37, 11, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 7, 9, 38, 10, 53, 11, 53, 10, 53, 11, 52, 11, 51, 13, 49, 14, 43, 20, 36, 27, 37, 25, 39, 23, 41, 23, 41, 25, 39, 27, 37, 28, 44, 21, 50, 15, 52, 13, 52, 13, 53, 11, 54, 11, 53, 11, 54, 11, 53, 11, 54, 10, 54, 10, 5, 9, 40, 10, 5, 9, 40, 10, 5, 9, 40, 10, 5, 9, 40, 10, 5, 9, 40, 10, 5, 9, 40, 10, 5, 9, 40, 10, 5, 9, 40, 10, 5, 9, 39, 11, 5, 9, 39, 11, 5, 9, 38, 11, 6, 9, 37, 12, 19, 2, 30, 12, 20, 4, 27, 13, 20, 7, 22, 14, 21, 10, 16, 17, 21, 42, 22, 41, 23, 40, 24, 38, 26, 37, 27, 35, 32, 29, 40, 21, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 170};
//
//unsigned char four [] = {255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 224, 13, 50, 14, 50, 14, 49, 15, 48, 16, 48, 16, 47, 17, 46, 18, 46, 18, 12, 9, 24, 19, 12, 9, 23, 10, 1, 9, 12, 9, 23, 10, 1, 9, 12, 9, 22, 10, 2, 9, 12, 9, 21, 10, 3, 9, 12, 9, 21, 10, 3, 9, 12, 9, 20, 10, 4, 9, 12, 9, 19, 10, 5, 9, 12, 9, 19, 10, 5, 9, 12, 9, 18, 10, 6, 9, 12, 9, 17, 10, 7, 9, 12, 9, 16, 11, 7, 9, 37, 10, 8, 9, 36, 10, 9, 9, 35, 11, 9, 9, 35, 10, 10, 9, 34, 10, 11, 9, 33, 11, 11, 9, 33, 10, 12, 9, 32, 10, 13, 9, 31, 11, 13, 9, 31, 10, 14, 9, 30, 10, 15, 9, 29, 11, 15, 9, 29, 10, 16, 9, 28, 10, 17, 9, 27, 11, 17, 9, 27, 10, 18, 9, 26, 10, 19, 9, 25, 11, 19, 9, 25, 10, 20, 9, 24, 10, 21, 9, 24, 10, 21, 9, 24, 9, 22, 9, 24, 9, 22, 9, 24, 8, 23, 9, 24, 50, 2, 9, 3, 50, 2, 9, 3, 50, 2, 9, 3, 50, 2, 9, 3, 50, 2, 9, 3, 50, 2, 9, 3, 50, 2, 9, 34, 9, 12, 9, 34, 9, 12, 9, 34, 9, 12, 9, 34, 9, 12, 9, 34, 9, 12, 9, 34, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 55, 9, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 224};

// out of memory


void show_display(unsigned char *character, int shift) {
  bool pixel = false;
  bool colons = true;
  int i=0;
  int num = character[i];

  for (int x=0; x<127; x++) {
    for (int y=0; y<64; y++) {

      display.drawPixel(
        x,
        63 - y,
        pixel && (colons || y < 64-16) && (y % shift == 0 && x % shift == 0) ? WHITE : BLACK
      );

      num--;
      while (num == 0) {
        i++;
        pixel = !pixel;
        num = character[i];
      }
    }
  }
  display.display();
}

void fade_in(unsigned char *character) {
  for (int shift=10; shift>=1; shift--)
    show_display(character, shift);
}

void fade_out(unsigned char *character) {
  for (int shift=1; shift<=10; shift++)
    show_display(character, shift);
}

void loop() {
  /*
   * TODO: Cool circle effect ?
        double res = sqrt(pow(double(x) - 63.0, 2) + pow(double(y) - 32.0, 2));
        display.drawPixel(x, y, res < radius && res > (radius - 2.0) ? WHITE : BLACK);
    }
  }
  */

  unsigned char *character = one;

  character = one;

  fade_in(character);
  fade_out(character);

  character = two;

  fade_in(character);
  fade_out(character);

//  character = three;
//
//  fade_in(character);
//  fade_out(character);
//  character = four;
//
//  fade_in(character);
//  fade_out(character);
  // out of memory ;-)
}

